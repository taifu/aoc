import unittest
import pytest

import day_18 as day


class TestDay(unittest.TestCase):
    def setUp(self):
        self.data = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
"""

    def test_explode(self):
        for before, after in (("[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"),
                              ("[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"),
                              ("[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"),
                              ("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"),
                              ("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"),
                              ):
            self.assertEqual(day.explode(before)[0], after)

    def test_split(self):
        for before, after in (("[[[[0,7],4],[15,[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]"),
                              ("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]"),
                              ):
            self.assertEqual(day.split(before)[0], after)

    def test_addition(self):
        for add_1, add_2, after in (("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]", "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"),
                                    ):
            self.assertEqual(day.addition(add_1, add_2), after)

    def test_reduce(self):
        for before, after in (("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
                              ):
            self.assertEqual(day.reduce(before), after)

    def test_sum(self):
        for before, after in (("""[1,1]
[2,2]
[3,3]
[4,4]""", "[[[[1,1],[2,2]],[3,3]],[4,4]]"),
                              ("""[1,1]
[2,2]
[3,3]
[4,4]
[5,5]""", "[[[[3,0],[5,3]],[4,4]],[5,5]]"),
                              ("""[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]""", "[[[[5,0],[7,4]],[5,5]],[6,6]]"),
                              ("""[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]""", "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
                              ):
            self.assertEqual(day.sum(before.split("\n")), after)

    def test_magnitude(self):
        for snailfish, magnitude in (("[9,1]", 29),
                                     ("[1,9]", 21),
                                     ("[[9,1],[1,9]]", 129),
                                     ("[[1,2],[[3,4],5]]", 143),
                                     ("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384),
                                     ("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445),
                                     ("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791),
                                     ("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137),
                                     ("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488),
                                     ):
            self.assertEqual(day.magnitude(snailfish), magnitude)

    def test_part_1(self):
        self.assertEqual(day.solve1(self.data), 4140)

    def test_part_2(self):
        self.assertEqual(day.solve2(self.data), 3993)

    @pytest.mark.slow
    def test_solution(self):
        import os
        data = open(os.path.dirname(__file__) + "/input.txt").read()
        self.assertEqual(day.solve1(data), 4469)
        self.assertEqual(day.solve2(data), 4770)
