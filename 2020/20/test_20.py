import unittest
import copy

import day_20 as day


class TestDay(unittest.TestCase):
    def setUp(self):
        self.data = """Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...
"""
        self.tile = [(0, 0, 0, 1, 1), (0, 1, 0, 0, 0), (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (1, 1, 1, 1, 0)]
        self.backup = copy.deepcopy(self.tile)

    def test_parse(self):
        tiles = day.parse(self.data)
        self.assertEqual(set(tiles.keys()), {2311, 3079, 2473, 2729, 1489, 1171, 1427, 2971, 1951})
        self.assertEqual(tiles[2311], [(0, 0, 1, 1, 0, 1, 0, 0, 1, 0), (1, 1, 0, 0, 1, 0, 0, 0, 0, 0), (1, 0, 0, 0, 1, 1, 0, 0, 1, 0), (1, 1, 1, 1, 0, 1, 0, 0, 0, 1), (1, 1, 0, 1, 1, 0, 1, 1, 1, 0),
                                       (1, 1, 0, 0, 0, 1, 0, 1, 1, 1), (0, 1, 0, 1, 0, 1, 0, 0, 1, 1), (0, 0, 1, 0, 0, 0, 0, 1, 0, 0), (1, 1, 1, 0, 0, 0, 1, 0, 1, 0), (0, 0, 1, 1, 1, 0, 0, 1, 1, 1)])
        self.assertEqual(tiles[1951], [(1, 0, 1, 1, 0, 0, 0, 1, 1, 0), (1, 0, 1, 1, 1, 1, 0, 0, 0, 1), (0, 0, 0, 0, 0, 1, 0, 0, 1, 1), (1, 0, 0, 0, 1, 1, 1, 1, 1, 1), (0, 1, 1, 0, 1, 0, 0, 0, 0, 1),
                                       (0, 1, 1, 1, 0, 1, 1, 1, 1, 1), (1, 1, 1, 0, 1, 1, 0, 1, 1, 0), (0, 1, 1, 1, 0, 0, 0, 0, 1, 0), (0, 0, 1, 0, 1, 0, 0, 1, 0, 1), (1, 0, 0, 0, 1, 1, 0, 1, 0, 0)])
        self.assertEqual(tiles[1171], [(1, 1, 1, 1, 0, 0, 0, 1, 1, 0), (1, 0, 0, 1, 1, 0, 1, 0, 0, 1), (1, 1, 0, 1, 0, 0, 1, 0, 1, 0), (0, 1, 1, 1, 0, 1, 1, 1, 1, 0), (0, 0, 1, 1, 1, 0, 1, 1, 1, 1),
                                       (0, 1, 1, 0, 0, 0, 0, 1, 1, 0), (0, 1, 0, 0, 0, 1, 1, 1, 1, 0), (1, 0, 1, 1, 0, 1, 1, 1, 1, 0), (1, 1, 1, 1, 0, 0, 1, 0, 0, 0), (0, 0, 0, 0, 0, 1, 1, 0, 0, 0)])
        self.assertEqual(tiles[1427], [(1, 1, 1, 0, 1, 1, 0, 1, 0, 0), (0, 1, 0, 0, 1, 0, 1, 1, 0, 0), (0, 1, 0, 1, 1, 0, 1, 0, 0, 1), (1, 0, 1, 0, 1, 0, 1, 1, 0, 1), (0, 0, 0, 0, 1, 0, 0, 0, 1, 1),
                                       (0, 0, 0, 1, 1, 0, 0, 1, 1, 0), (0, 0, 0, 1, 0, 1, 1, 1, 1, 1), (0, 1, 0, 1, 1, 1, 1, 0, 1, 0), (0, 0, 1, 0, 0, 1, 1, 1, 0, 1), (0, 0, 1, 1, 0, 1, 0, 0, 1, 0)])

    def test_flip(self):
        self.assertEqual(day.flip(self.tile), [(1, 1, 0, 0, 0), (0, 0, 0, 1, 0), (1, 0, 0, 1, 0), (0, 0, 1, 0, 0), (0, 1, 1, 1, 1)])
        self.assertEqual(self.tile, self.backup)

    def test_rotate(self):
        self.assertEqual(day.rotate(self.tile), [[1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 1]])
        self.assertEqual(self.tile, self.backup)

    def test_get_borders(self):
        self.assertEqual(day.get_borders(self.tile), ((0, 0, 0, 1, 1), (1, 0, 1, 0, 0), (1, 1, 1, 1, 0), (0, 0, 0, 0, 1)))
        self.assertEqual(self.tile, self.backup)

    def test_get_dots(self):
        self.assertEqual(day.get_dots(day.MONSTER), ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
                                                     (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1),
                                                     (0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0)))

    def test_rotate_file(self):
        self.assertEqual(list(day.rotate_flip(self.tile)), [[(0, 0, 0, 1, 1), (0, 1, 0, 0, 0), (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (1, 1, 1, 1, 0)],
                                                            [[1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 1]],
                                                            [[0, 1, 1, 1, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0]],
                                                            [[1, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 1], [0, 0, 1, 0, 1]],
                                                            [(1, 1, 0, 0, 0), (0, 0, 0, 1, 0), (1, 0, 0, 1, 0), (0, 0, 1, 0, 0), (0, 1, 1, 1, 1)],
                                                            [[0, 0, 0, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 0]],
                                                            [[1, 1, 1, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 0, 1, 1]],
                                                            [[0, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 0]]])

    def test_get_adjacents(self):
        tiles = day.parse(self.data)
        tile = tiles[2311]
        self.assertEqual(day.get_adjacents(2311, tile, day.get_all_borders(tiles)), [{1427}, {3079}, set(), {1951}])

    def test_find_corners(self):
        tiles = day.parse(self.data)
        self.assertEqual(day.find_corners(tiles, day.get_all_borders(tiles)), [1951, 1171, 2971, 3079])

    def test_solution(self):
        import os
        data = open(os.path.dirname(__file__) + "/input.txt").read()
        self.assertEqual(day.solve(data), 17032646100079)
        self.assertEqual(day.solve(data, step=2), 2006)
