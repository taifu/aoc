from typing import TypeAlias, Dict, List, Tuple, Generator, Set, Optional, Union, Any  # noqa: F401
from operator import and_, or_, xor
from collections import defaultdict
from itertools import combinations


Changes: TypeAlias = Union[Tuple[int, ...], Tuple[()]]


class Solution:
    _instance = None

    @classmethod
    def get_instance(cls, data: str) -> "Solution":
        if cls._instance is None:
            cls._instance = Solution(data)
        return cls._instance

    def __init__(self, raw: str) -> None:
        self.keys = []
        self.locks = []
        for obj in raw.strip().split('\n\n'):
            lines = obj.strip().splitlines()
            objs = self.keys if set(lines[0]) == set('.') else self.locks
            objs.append([[lines[y][x] for y in range(len(lines))].count('#') for x in range(len(lines[0]))])

    def count(self) -> str:
        match = 0
        for key in self.keys:
            for lock in self.locks:
                import pdb; pdb.set_trace()
                if len(set([x + y for x, y in zip(key, lock)])) == 1:
                    match += 1
        return match


def solve1(data: str) -> int:
    return Solution.get_instance(data).count()


if __name__ == "__main__":
    import sys
    data = open((sys.argv + ["input.txt"])[1]).read()
    print(solve1(data))
